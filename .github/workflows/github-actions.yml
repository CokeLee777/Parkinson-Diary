name: Parkinson-diary CI/CD - Backend CI and CD with Docker & AWS ECS

on:
  push:
    branches: [ "Master" ]

permissions:
  contents: read

jobs:
  API-SERVER-CI-CD:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ApiServer/parkinson
    steps:
    # 소스코드 다운로드
    - name: Checkout code
      uses: actions/checkout@v3
    # ENV 세팅
    - name: Setting env file
      run: |
        mkdir env
        touch ./env/prod.env
        echo "${{ secrets.NODE_ENV }}" >> ./env/prod.env
      shell: bash
    # Firebase SDK 세팅
    - name: Setting Firebase SDK
      run: |
        touch parkinson-diary-firebase-adminsdk.json
        echo "${{ secrets.FIREBASE_SDK }}" >> parkinson-diary-firebase-adminsdk.json
    # Node 어플리케이션 Docker Image 빌드 및 DockerHub에 푸쉬
    - name: Build Docker Image and Push DockerHub For Node.js
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_NODEJS_REPOSITORY }}:latest \
        -f dockerfiles/Dockerfile-prod .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_NODEJS_REPOSITORY }}:latest
  ADMIN-WEB-SERVER-CI-CD:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: AdminWebSite
    steps:
    # 소스코드 다운로드
    - name: Checkout code
      uses: actions/checkout@v3
    # JDK 세팅
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    # Gradle 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ./.gradle/caches
          ./.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    # Gradle 빌드
    - name: Build with Gradle
      run: |
        ./gradlew bootJar
    # Spring 어플리케이션 Docker Image 빌드 및 DockerHub 푸쉬
    - name: Build Docker Image For Spring
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_SPRING_REPOSITORY }}:latest \
        -f dockerfiles/Dockerfile-prod .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_SPRING_REPOSITORY }}:latest